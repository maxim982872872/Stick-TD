// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ñ–∞–π–ª - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –º–æ–¥—É–ª—å–Ω—ã–π

// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
  gold: GameConfig.player.startGold,
  wave: 0,
  baseHP: GameConfig.player.baseHP,
  maxBaseHP: GameConfig.player.baseHP,
  baseLevel: GameConfig.player.baseLevel,
  arrows: GameConfig.player.startArrows,
  reloading: false,
  paused: false,
  gameStarted: false,
  passiveGoldTimer: 0,

  // –°–∏—Å—Ç–µ–º—ã
  achievementSystem: new AchievementSystem(),

  // –û—Ä—É–∂–∏–µ –∏–≥—Ä–æ–∫–∞
  playerWeapon: { ...GameConfig.weapons.simple, type: 'simple' },

  // –£–ª—É—á—à–µ–Ω–∏—è
  upgrades: {
    archerDamage: { cost: GameConfig.upgrades.archerDamage.baseCost, level: 0 },
    fireRate: { cost: GameConfig.upgrades.fireRate.baseCost, level: 0 },
    baseHP: { cost: GameConfig.upgrades.baseHP.baseCost, level: 0 },
    baseLevel: { cost: GameConfig.upgrades.baseLevel.baseCost, level: 0 }
  },

  updateUI: function() {
    document.getElementById('gold').textContent = this.gold;
    document.getElementById('arrows').textContent = this.reloading ? "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞..." : this.arrows;
    document.getElementById('baseLevel').textContent = this.baseLevel;
    document.getElementById('waveCounter').textContent = `–í–æ–ª–Ω–∞: ${this.wave}`;

    const healthPercentage = (this.baseHP / this.maxBaseHP) * 100;
    document.getElementById('baseHealth').style.width = healthPercentage + '%';

    if (this.reloading) {
      document.getElementById('reloadStatus').innerHTML = '<span class="reload-indicator">üîÑ –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞...</span>';
    } else {
      document.getElementById('reloadStatus').innerHTML = '';
    }
  }
};

// –ó–≤—É–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
let soundEnabled = true;
let soundVolume = 0.3;

// –ò–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
let enemies = [];
let soldiers = [];
let soldierQueue = [];
let bullets = [];
let particles = [];
let explosions = [];

// –û–∫—Ä—É–∂–µ–Ω–∏–µ
let backgroundStars = [];
let clouds = [];
let trees = [];
let rocks = [];
let grass = [];

// –ö–∞–º–µ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
let camera = { x: 0, y: 0 };
let keys = {};
let touchStart = null;
let isDragging = false;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const BASE_X = 650;
const BASE_Y = 250;
const BASE_WIDTH = 100;
const BASE_HEIGHT = 100;

// –ó–≤—É–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function playSound(soundId) {
  if (!soundEnabled) return;
  const audio = document.getElementById(soundId);
  if (audio) {
    audio.currentTime = 0;
    audio.volume = soundVolume;
    audio.play().catch(() => {});
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(text, color = "#4CAF50") {
  const notification = document.createElement('div');
  notification.className = 'notification';
  notification.textContent = text;
  notification.style.background = color;
  document.body.appendChild(notification);

  setTimeout(() => {
    if (document.body.contains(notification)) {
      document.body.removeChild(notification);
    }
  }, 3000);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º object pooling
function createParticle(x, y, text, color = "#FFFFFF") {
  const particle = ObjectPools.particles.get();
  particle.x = x;
  particle.y = y;
  particle.text = text;
  particle.color = color;
  particle.life = 60;
  particle.vy = -2;
}

function createExplosion(x, y, radius) {
  const explosion = ObjectPools.explosions.get();
  explosion.x = x;
  explosion.y = y;
  explosion.radius = 0;
  explosion.maxRadius = radius;
  explosion.life = 20;
}

function createBullet(x, y, targetX, targetY, damage, color, isPlayer = false) {
  const bullet = ObjectPools.bullets.get();
  bullet.x = x;
  bullet.y = y;
  bullet.targetX = targetX;
  bullet.targetY = targetY;
  bullet.speed = 8;
  bullet.damage = damage;
  bullet.color = color;
  bullet.isPlayer = isPlayer;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ–Ω–∞
function generateBackground() {
  for (let i = 0; i < 50; i++) {
    backgroundStars.push({
      x: Math.random() * 1600,
      y: Math.random() * 300,
      size: Math.random() * 2 + 1,
      twinkle: Math.random() * 100
    });
  }

  for (let i = 0; i < 8; i++) {
    clouds.push({
      x: Math.random() * 1600,
      y: Math.random() * 150 + 50,
      size: Math.random() * 60 + 40,
      speed: Math.random() * 0.2 + 0.1
    });
  }

  for (let i = 0; i < 15; i++) {
    trees.push({
      x: Math.random() * 1600,
      y: 350 + Math.random() * 100,
      height: Math.random() * 40 + 30,
      width: Math.random() * 15 + 10
    });
  }

  for (let i = 0; i < 20; i++) {
    rocks.push({
      x: Math.random() * 1600,
      y: 400 + Math.random() * 150,
      size: Math.random() * 20 + 10
    });
  }

  for (let i = 0; i < 100; i++) {
    grass.push({
      x: Math.random() * 1600,
      y: 380 + Math.random() * 180,
      height: Math.random() * 15 + 5
    });
  }
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–∞
function drawBackground() {
  // –ó–≤–µ–∑–¥—ã
  backgroundStars.forEach(star => {
    const alpha = (Math.sin(star.twinkle) + 1) / 2;
    ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;
    ctx.beginPath();
    ctx.arc(star.x - camera.x * 0.1, star.y - camera.y * 0.1, star.size, 0, GameConfig.TWO_PI);
    ctx.fill();
    star.twinkle += 0.1;
  });

  // –û–±–ª–∞–∫–∞
  ctx.fillStyle = "rgba(255, 255, 255, 0.7)";
  clouds.forEach(cloud => {
    ctx.beginPath();
    ctx.arc(cloud.x - camera.x * 0.3, cloud.y - camera.y * 0.3, cloud.size, 0, GameConfig.TWO_PI);
    ctx.arc(cloud.x - camera.x * 0.3 + cloud.size * 0.5, cloud.y - camera.y * 0.3, cloud.size * 0.8, 0, GameConfig.TWO_PI);
    ctx.arc(cloud.x - camera.x * 0.3 - cloud.size * 0.5, cloud.y - camera.y * 0.3, cloud.size * 0.8, 0, GameConfig.TWO_PI);
    ctx.fill();
    cloud.x += cloud.speed;
    if (cloud.x > 1600) cloud.x = -100;
  });

  // –î–µ—Ä–µ–≤—å—è
  trees.forEach(tree => {
    const treeX = tree.x - camera.x * 0.8;
    const treeY = tree.y - camera.y * 0.8;
    ctx.fillStyle = "#8B4513";
    ctx.fillRect(treeX - tree.width/4, treeY, tree.width/2, tree.height);
    ctx.fillStyle = "#228B22";
    ctx.beginPath();
    ctx.arc(treeX, treeY - tree.height/3, tree.width, 0, GameConfig.TWO_PI);
    ctx.fill();
  });

  // –ö–∞–º–Ω–∏
  ctx.fillStyle = "#696969";
  rocks.forEach(rock => {
    ctx.beginPath();
    ctx.arc(rock.x - camera.x, rock.y - camera.y, rock.size, 0, GameConfig.TWO_PI);
    ctx.fill();
  });

  // –¢—Ä–∞–≤–∞
  ctx.strokeStyle = "#32CD32";
  ctx.lineWidth = 2;
  grass.forEach(g => {
    ctx.beginPath();
    ctx.moveTo(g.x - camera.x, g.y - camera.y);
    ctx.lineTo(g.x - camera.x + Math.sin(Date.now() * 0.001 + g.x) * 2, g.y - g.height - camera.y);
    ctx.stroke();
  });
}

// –†–∏—Å–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã
function drawBase() {
  const x = BASE_X - camera.x;
  const y = BASE_Y - camera.y;

  ctx.fillStyle = "#8B4513";
  ctx.fillRect(x, y, BASE_WIDTH, BASE_HEIGHT);

  ctx.strokeStyle = "#654321";
  ctx.lineWidth = 3;
  ctx.strokeRect(x, y, BASE_WIDTH, BASE_HEIGHT);

  // –ó—É–±—Ü—ã –∫—Ä–µ–ø–æ—Å—Ç–∏
  ctx.fillStyle = "#654321";
  for (let i = 0; i < 5; i++) {
    ctx.fillRect(x + i * 20, y - 15, 15, 15);
  }

  // –§–ª–∞–≥
  ctx.fillStyle = "#FF0000";
  ctx.fillRect(x + BASE_WIDTH/2 - 2, y - 40, 4, 30);
  ctx.fillStyle = "#4CAF50";
  ctx.fillRect(x + BASE_WIDTH/2 + 2, y - 35, 20, 15);

  // –ü–æ–ª–æ—Å–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã
  const healthBarWidth = BASE_WIDTH + 20;
  const healthPercentage = gameState.baseHP / gameState.maxBaseHP;

  ctx.fillStyle = "#FF0000";
  ctx.fillRect(x - 10, y - 25, healthBarWidth, 8);
  ctx.fillStyle = "#00FF00";
  ctx.fillRect(x - 10, y - 25, healthBarWidth * healthPercentage, 8);

  // –¢–µ–∫—Å—Ç —É—Ä–æ–≤–Ω—è –±–∞–∑—ã
  ctx.fillStyle = "#FFD700";
  ctx.font = "bold 16px Arial";
  ctx.textAlign = "center";
  ctx.fillText(`Lv.${gameState.baseLevel}`, x + BASE_WIDTH/2, y - 35);
}

// –°—Ç—Ä–µ–ª—å–±–∞ –∏–≥—Ä–æ–∫–∞
function handleShoot(event) {
  if (gameState.reloading || gameState.arrows <= 0 || gameState.paused) return;

  const rect = canvas.getBoundingClientRect();
  const mouseX = event.clientX - rect.left + camera.x;
  const mouseY = event.clientY - rect.top + camera.y;

  const playerX = BASE_X + 50;
  const playerY = BASE_Y + 50;

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∏ –∏–≥—Ä–æ–∫–∞
  createBullet(playerX, playerY, mouseX, mouseY, gameState.playerWeapon.damage, "#FFD700", true);
  gameState.arrows--;
  playSound('shootSound');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
  enemies.forEach(enemy => {
    const dist = Math.hypot(enemy.x - mouseX, enemy.y - mouseY);
    if (dist < 30) {
      let damage = gameState.playerWeapon.damage;

      if (gameState.playerWeapon.aoe) {
        enemies.forEach(e => {
          const aoeDist = Math.hypot(e.x - enemy.x, e.y - enemy.y);
          if (aoeDist <= 60) {
            e.hp -= damage;
            createParticle(e.x, e.y, `-${damage}`, "#FFD700");
          }
        });
        createExplosion(enemy.x, enemy.y, 60);
      } else {
        enemy.hp -= damage;
        createParticle(enemy.x, enemy.y, `-${damage}`, "#FFD700");
      }
    }
  });

  // –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞
  if (gameState.arrows === 0) {
    gameState.reloading = true;
    showNotification("–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞...", "#FF8844");
    setTimeout(() => {
      gameState.arrows = gameState.playerWeapon.maxArrows;
      gameState.reloading = false;
      showNotification("–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
      gameState.updateUI();
    }, gameState.playerWeapon.reloadTime);
  }
  gameState.updateUI();
}

// –°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–π –≤–æ–ª–Ω—ã - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å
function startWave() {
  if (enemies.length > 0) {
    showNotification("–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–æ–ª–Ω—ã!", "#FF8844");
    return;
  }

  gameState.wave++;
  gameState.gameStarted = true;

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  gameState.achievementSystem.updateStatistic('waveReached', gameState.wave);

  // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤–æ–ª–Ω—É
  const waveReward = GameConfig.waves.waveReward(gameState.wave);
  gameState.gold += waveReward;
  showNotification(`–í–æ–ª–Ω–∞ ${gameState.wave} –Ω–∞—á–∞–ª–∞—Å—å! +${waveReward} –∑–æ–ª–æ—Ç–∞`);

  // –°–ø–∞–≤–Ω –≤—Ä–∞–≥–æ–≤ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
  const enemyCount = GameConfig.waves.enemiesPerWave(gameState.wave);
  for (let i = 0; i < enemyCount; i++) {
    setTimeout(() => spawnEnemy(), i * GameConfig.waves.spawnDelay);
  }

  gameState.updateUI();
}

// –°–ø–∞–≤–Ω –≤—Ä–∞–≥–∞
function spawnEnemy() {
  const types = Object.keys(GameConfig.enemies);
  let type;

  if (gameState.wave % GameConfig.waves.bossWaveInterval === 0 && gameState.wave > 0) {
    const bossTypes = types.filter(t => GameConfig.enemies[t].isBoss);
    type = bossTypes[Math.floor(Math.random() * bossTypes.length)];
    showBossWarning(GameConfig.enemies[type].name);
  } else {
    const availableTypes = types.filter(t => !GameConfig.enemies[t].isBoss);
    type = availableTypes[Math.floor(Math.random() * availableTypes.length)];
  }

  const enemy = new Enemy(-50, 200 + Math.random() * 200, type);
  // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤–æ–ª–Ω–∞–º
  enemy.hp *= (1 + gameState.wave * 0.1);
  enemy.maxHP = enemy.hp;
  enemy.reward *= (1 + gameState.wave * 0.05);

  enemies.push(enemy);
}

// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–æ—Å—Å–µ
function showBossWarning(bossName) {
  const warning = document.createElement('div');
  warning.className = 'boss-warning';
  warning.innerHTML = `‚ö†Ô∏è –ë–û–°–° –ü–û–Ø–í–õ–Ø–ï–¢–°–Ø! ‚ö†Ô∏è<br>${bossName}`;
  document.body.appendChild(warning);

  setTimeout(() => {
    if (document.body.contains(warning)) document.body.removeChild(warning);
  }, 3000);
}

// –ü–æ–∫—É–ø–∫–∞ —Å–æ–ª–¥–∞—Ç–∞
function buySoldier(type) {
  const config = GameConfig.soldiers[type];
  if (gameState.gold >= config.cost) {
    gameState.gold -= config.cost;

    soldierQueue.push({
      type: type,
      spawnTime: Date.now() + 2000
    });

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    GameConfig.soldiers[type].cost = Math.floor(config.cost * 1.15);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    gameState.achievementSystem.incrementStatistic('soldiersHired');

    playSound('soldierBuySound');
    showNotification(`${config.name || type} –∫—É–ø–ª–µ–Ω! –ü–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫.`);
    gameState.updateUI();
    updateShopPrices();
  } else {
    showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!", "#FF4444");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–ª–¥–∞—Ç
function processSoldierQueue() {
  const now = Date.now();
  for (let i = soldierQueue.length - 1; i >= 0; i--) {
    const queueItem = soldierQueue[i];
    if (now >= queueItem.spawnTime) {
      const soldier = new Soldier(
        BASE_X + Math.random() * 100 - 50,
        BASE_Y + Math.random() * 100 - 50,
        queueItem.type
      );
      soldiers.push(soldier);
      soldierQueue.splice(i, 1);
      showNotification(`${GameConfig.soldiers[queueItem.type].name || queueItem.type} –≥–æ—Ç–æ–≤ –∫ –±–æ—é!`, "#4CAF50");
    }
  }
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
function buyUpgrade(type) {
  const upgrade = gameState.upgrades[type];
  const config = GameConfig.upgrades[type];

  if (gameState.gold >= upgrade.cost) {
    gameState.gold -= upgrade.cost;
    upgrade.level++;

    switch (type) {
      case 'archerDamage':
        GameConfig.soldiers.archer.damage = Math.floor(GameConfig.soldiers.archer.damage * config.multiplier);
        showNotification("–£—Ä–æ–Ω –ª—É—á–Ω–∏–∫–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω!");
        break;
      case 'fireRate':
        Object.keys(GameConfig.soldiers).forEach(key => {
          GameConfig.soldiers[key].cooldown = Math.floor(GameConfig.soldiers[key].cooldown * config.multiplier);
        });
        showNotification("–°–∫–æ—Ä–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–±—ã —É–≤–µ–ª–∏—á–µ–Ω–∞!");
        break;
      case 'baseHP':
        gameState.maxBaseHP += config.bonus;
        gameState.baseHP += config.bonus;
        showNotification("–ó–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã —É–≤–µ–ª–∏—á–µ–Ω–æ!");
        break;
      case 'baseLevel':
        gameState.baseLevel++;
        gameState.maxBaseHP += config.bonus;
        gameState.baseHP += config.bonus;
        showNotification("–£—Ä–æ–≤–µ–Ω—å –±–∞–∑—ã –ø–æ–≤—ã—à–µ–Ω!");
        break;
    }

    upgrade.cost = Math.floor(upgrade.cost * config.costIncrease);
    playSound('soldierBuySound');
    gameState.updateUI();
    updateShopPrices();
  } else {
    showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!", "#FF4444");
  }
}

// –ü–æ–∫—É–ø–∫–∞ –æ—Ä—É–∂–∏—è
function buyWeapon(type) {
  const weapon = GameConfig.weapons[type];
  if (gameState.gold >= weapon.cost) {
    gameState.gold -= weapon.cost;
    gameState.playerWeapon = { ...weapon, type: type };
    gameState.arrows = weapon.maxArrows;

    playSound('soldierBuySound');
    showNotification(`–û—Ä—É–∂–∏–µ —É–ª—É—á—à–µ–Ω–æ: ${type}!`, "#9C27B0");
    gameState.updateUI();
  } else {
    showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!", "#FF4444");
  }
}

// –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
function buyItem(type) {
  const items = {
    arrows: { 
      cost: 50, 
      effect: () => { 
        gameState.arrows = Math.min(gameState.arrows + 10, gameState.playerWeapon.maxArrows); 
        showNotification("+10 —Å—Ç—Ä–µ–ª!"); 
      } 
    },
    heal: { 
      cost: 150, 
      effect: () => { 
        gameState.baseHP = Math.min(gameState.baseHP + 50, gameState.maxBaseHP); 
        showNotification("–ë–∞–∑–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"); 
      } 
    },
    bomb: { 
      cost: 400, 
      effect: () => { 
        enemies.forEach(enemy => {
          enemy.hp = 0;
          createExplosion(enemy.x, enemy.y, 50);
        });
        showNotification("–í—Å–µ –≤—Ä–∞–≥–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã!", "#FF6B35");
      }
    }
  };

  const item = items[type];
  if (gameState.gold >= item.cost) {
    gameState.gold -= item.cost;
    item.effect();
    playSound('goldSound');
    gameState.updateUI();
  } else {
    showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!", "#FF4444");
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
function updateShopPrices() {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Å–æ–ª–¥–∞—Ç
  Object.keys(GameConfig.soldiers).forEach(type => {
    const element = document.getElementById(`${type}-cost`);
    if (element) element.textContent = GameConfig.soldiers[type].cost;
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
  Object.keys(gameState.upgrades).forEach(type => {
    const costElement = document.getElementById(`${type.replace(/([A-Z])/g, '-$1').toLowerCase()}-cost`);
    const levelElement = document.getElementById(`${type.replace(/([A-Z])/g, '-$1').toLowerCase()}-level`);
    if (costElement) costElement.textContent = gameState.upgrades[type].cost;
    if (levelElement) levelElement.textContent = gameState.upgrades[type].level;
  });
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop() {
  if (!gameState.paused) {
    // –ü–∞—Å—Å–∏–≤–Ω–æ–µ –∑–æ–ª–æ—Ç–æ
    gameState.passiveGoldTimer++;
    if (gameState.passiveGoldTimer >= 300) {
      gameState.gold += 5 + Math.floor(gameState.wave / 3);
      gameState.passiveGoldTimer = 0;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–ª–¥–∞—Ç
    processSoldierQueue();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤
    enemies.forEach((enemy, index) => {
      if (enemy.hp <= 0) {
        gameState.gold += enemy.reward;
        gameState.achievementSystem.incrementStatistic('enemiesKilled');
        if (enemy.isBoss) {
          gameState.achievementSystem.incrementStatistic('bossesKilled');
        }
        createExplosion(enemy.x, enemy.y, 30);
        enemies.splice(index, 1);
        playSound('goldSound');
        return;
      }

      const damage = enemy.update(BASE_X, BASE_Y);
      if (damage > 0) {
        gameState.baseHP -= damage;
        createParticle(BASE_X + 50, BASE_Y + 50, `-${damage}`, "#FF0000");

        if (gameState.baseHP <= 0) {
          gameOver();
        }
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–ª–¥–∞—Ç
    soldiers.forEach((soldier, index) => {
      if (soldier.hp <= 0) {
        soldiers.splice(index, 1);
        return;
      }

      const actions = soldier.update(enemies, soldiers, BASE_X, BASE_Y);
      if (actions) {
        actions.forEach(action => {
          switch (action.type) {
            case 'bullet':
              createBullet(action.x, action.y, action.targetX, action.targetY, action.damage, action.color);
              break;
            case 'particle':
              createParticle(action.x, action.y, action.text, action.color);
              break;
            case 'explosion':
              createExplosion(action.x, action.y, action.radius);
              break;
          }
        });
        playSound('shootSound');
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª—å
    ObjectPools.bullets.active.forEach((bullet, index) => {
      const dx = bullet.targetX - bullet.x;
      const dy = bullet.targetY - bullet.y;
      const distance = Math.hypot(dx, dy);

      if (distance < bullet.speed) {
        ObjectPools.bullets.release(bullet);
      } else {
        bullet.x += (dx / distance) * bullet.speed;
        bullet.y += (dy / distance) * bullet.speed;
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
    ObjectPools.particles.active.forEach(particle => {
      particle.y += particle.vy;
      particle.life--;
      if (particle.life <= 0) {
        ObjectPools.particles.release(particle);
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∑—Ä—ã–≤–æ–≤
    ObjectPools.explosions.active.forEach(explosion => {
      explosion.radius += explosion.maxRadius / 20;
      explosion.life--;
      if (explosion.life <= 0) {
        ObjectPools.explosions.release(explosion);
      }
    });

    gameState.updateUI();
  }

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  drawBackground();
  drawBase();

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ –≤—Ä–∞–≥–æ–≤
  enemies.forEach(enemy => enemy.draw(ctx, camera));

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ —Å–æ–ª–¥–∞—Ç
  soldiers.forEach(soldier => soldier.draw(ctx, camera));

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—É–ª—å
  ObjectPools.bullets.active.forEach(bullet => {
    ctx.fillStyle = bullet.color;
    ctx.beginPath();
    ctx.arc(bullet.x - camera.x, bullet.y - camera.y, 3, 0, GameConfig.TWO_PI);
    ctx.fill();
  });

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
  ObjectPools.particles.active.forEach(particle => {
    ctx.save();
    ctx.font = "bold 16px Arial";
    ctx.fillStyle = particle.color;
    ctx.textAlign = "center";
    ctx.globalAlpha = particle.life / 60;
    ctx.fillText(particle.text, particle.x - camera.x, particle.y - camera.y);
    ctx.restore();
  });

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ –≤–∑—Ä—ã–≤–æ–≤
  ObjectPools.explosions.active.forEach(explosion => {
    ctx.save();
    ctx.globalAlpha = explosion.life / 20;
    ctx.strokeStyle = "#FF6B35";
    ctx.lineWidth = 3;
    ctx.beginPath();
    ctx.arc(explosion.x - camera.x, explosion.y - camera.y, explosion.radius, 0, GameConfig.TWO_PI);
    ctx.stroke();
    ctx.restore();
  });

  requestAnimationFrame(gameLoop);
}

// –°–µ–Ω—Å–æ—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
canvas.addEventListener("touchstart", (e) => {
  e.preventDefault();
  if (e.touches.length === 1) {
    const touch = e.touches[0];
    touchStart = { x: touch.clientX, y: touch.clientY, time: Date.now() };
    isDragging = false;
  }
});

canvas.addEventListener("touchmove", (e) => {
  e.preventDefault();
  if (!touchStart) return;

  const touch = e.touches[0];
  const deltaX = touch.clientX - touchStart.x;
  const deltaY = touch.clientY - touchStart.y;
  const dragDistance = Math.hypot(deltaX, deltaY);

  if (dragDistance > 15) {
    isDragging = true;
    camera.x -= deltaX * 0.5;
    camera.y -= deltaY * 0.5;
    camera.x = Math.max(-400, Math.min(400, camera.x));
    camera.y = Math.max(-200, Math.min(200, camera.y));
    touchStart.x = touch.clientX;
    touchStart.y = touch.clientY;
  }
});

canvas.addEventListener("touchend", (e) => {
  e.preventDefault();
  if (touchStart && !isDragging) {
    handleShoot({
      clientX: e.changedTouches[0].clientX,
      clientY: e.changedTouches[0].clientY
    });
  }
  isDragging = false;
  touchStart = null;
});

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
document.addEventListener("keydown", (e) => {
  keys[e.key.toLowerCase()] = true;
  if (e.key === ' ') {
    e.preventDefault();
    togglePause();
  }
});

document.addEventListener("keyup", (e) => {
  keys[e.key.toLowerCase()] = false;
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
function togglePause() {
  gameState.paused = !gameState.paused;
  showNotification(gameState.paused ? "–ò–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ" : "–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞", gameState.paused ? "#FFA500" : "#4CAF50");
}

function toggleShop() {
  const overlay = document.getElementById('shopOverlay');
  if (overlay.style.display === 'block') {
    overlay.style.display = 'none';
    gameState.paused = false;
  } else {
    overlay.style.display = 'block';
    gameState.paused = true;
  }
}

function switchTab(tab) {
  // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
  document.querySelectorAll('.shop-tab').forEach(t => t.classList.remove('active'));
  
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫
  document.querySelectorAll('[id$="-content"]').forEach(c => c.style.display = 'none');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞ –Ω–∞–∂–∞—Ç—É—é –≤–∫–ª–∞–¥–∫—É
  event.target.classList.add('active');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const content = document.getElementById(`${tab}-content`);
  if (content) {
    content.style.display = 'block';
  }
}

function toggleSettings() {
  const overlay = document.getElementById('settingsOverlay');
  if (overlay.style.display === 'block') {
    overlay.style.display = 'none';
    gameState.paused = false;
  } else {
    overlay.style.display = 'block';
    gameState.paused = true;
  }
}

function toggleEncyclopedia() {
  const overlay = document.getElementById('encyclopediaOverlay');
  if (overlay.style.display === 'block') {
    overlay.style.display = 'none';
    gameState.paused = false;
  } else {
    overlay.style.display = 'block';
    gameState.paused = true;
  }
}

function switchEncyclopediaTab(tab) {
  document.querySelectorAll('.encyclopedia-content').forEach(content => {
    content.style.display = 'none';
  });
  document.querySelectorAll('#encyclopediaOverlay .shop-tab').forEach(tabBtn => {
    tabBtn.classList.remove('active');
  });
  document.getElementById(tab + '-info').style.display = 'block';
  event.target.classList.add('active');
}

function changeVolume(value) {
  soundVolume = value / 100;
  document.getElementById('volumeValue').textContent = value + '%';
}

function toggleMute() {
  soundEnabled = !soundEnabled;
  showNotification(soundEnabled ? "–ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω" : "–ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω");
}

function gameOver() {
  gameState.paused = true;
  showNotification(`–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–æ–ª–Ω –ø—Ä–æ–π–¥–µ–Ω–æ: ${gameState.wave}`, "#FF0000");

  setTimeout(() => {
    if (confirm(`–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–í–æ–ª–Ω –ø—Ä–æ–π–¥–µ–Ω–æ: ${gameState.wave}\n–í—Ä–∞–≥–æ–≤ —É–±–∏—Ç–æ: ${gameState.achievementSystem.statistics.enemiesKilled}\n–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?`)) {
      restartGame();
    }
  }, 2000);
}

function restartGame() {
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  gameState.gold = GameConfig.player.startGold;
  gameState.wave = 0;
  gameState.baseHP = GameConfig.player.baseHP;
  gameState.maxBaseHP = GameConfig.player.baseHP;
  gameState.baseLevel = GameConfig.player.baseLevel;
  gameState.arrows = GameConfig.player.startArrows;
  gameState.reloading = false;
  gameState.paused = false;
  gameState.gameStarted = false;
  gameState.achievementSystem = new AchievementSystem();

  // –û—á–∏—Å—Ç–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤
  enemies = [];
  soldiers = [];
  soldierQueue = [];
  ObjectPools.bullets.releaseAll();
  ObjectPools.particles.releaseAll();
  ObjectPools.explosions.releaseAll();

  camera = { x: 0, y: 0 };

  // –°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥–∞ —Å–æ–ª–¥–∞—Ç
  Object.assign(GameConfig.soldiers, {
    warrior: { cost: 150, hp: 80, damage: 15, range: 400, cooldown: 60, color: "#8B4513" },
    archer: { cost: 200, hp: 50, damage: 25, range: 150, cooldown: 45, color: "#228B22" },
    crossbowman: { cost: 350, hp: 60, damage: 38, range: 180, cooldown: 56, color: "#8B008B" },
    pikeman: { cost: 300, hp: 75, damage: 20, range: 100, cooldown: 50, color: "#CD853F", slow: true },
    mage: { cost: 1200, hp: 40, damage: 500, range: 200, cooldown: 180, color: "#4B0082", aoe: true },
    healer: { cost: 500, hp: 60, damage: 0, range: 120, cooldown: 120, color: "#FFD700", heal: true },
    necromancer: { cost: 2000, hp: 80, damage: 150, range: 160, cooldown: 150, color: "#800080", summon: true },
    giant: { cost: 3500, hp: 1000, damage: 50, range: 120, cooldown: 60, color: "#8B4513", aoe: true, stun: true },
    paladin: { cost: 2500, hp: 250, damage: 50, range: 150, cooldown: 60, color: "#FFD700", shield: true }
  });

  gameState.playerWeapon = { ...GameConfig.weapons.simple, type: 'simple' };
  gameState.upgrades = {
    archerDamage: { cost: GameConfig.upgrades.archerDamage.baseCost, level: 0 },
    fireRate: { cost: GameConfig.upgrades.fireRate.baseCost, level: 0 },
    baseHP: { cost: GameConfig.upgrades.baseHP.baseCost, level: 0 },
    baseLevel: { cost: GameConfig.upgrades.baseLevel.baseCost, level: 0 }
  };

  gameState.updateUI();
  updateShopPrices();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞
function saveGame() {
  if (SaveSystem.save(gameState)) {
    showNotification("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", "#4CAF50");
  } else {
    showNotification("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", "#FF4444");
  }
}

function loadGame() {
  const saveData = SaveSystem.load();
  if (saveData) {
    gameState.gold = saveData.gold || gameState.gold;
    gameState.wave = saveData.wave || gameState.wave;
    gameState.baseLevel = saveData.baseLevel || gameState.baseLevel;
    gameState.maxBaseHP = saveData.maxBaseHP || gameState.maxBaseHP;

    if (saveData.achievements) {
      gameState.achievementSystem.loadProgress(saveData.achievements);
    }

    gameState.updateUI();
    showNotification("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!", "#4CAF50");
  } else {
    showNotification("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π!", "#FF8844");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
canvas.addEventListener("click", handleShoot);

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Ä–æ–Ω–∞
function applySoldierDamage(soldier, enemy) {
  if (soldier.special.shield && Math.random() < 0.4) {
    createParticle(soldier.x, soldier.y, "–ë–õ–û–ö!", "#FFD700");
    return false;
  }
  return true;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
  generateBackground();
  gameState.updateUI();
  updateShopPrices();

  const bgMusic = document.getElementById('backgroundMusic');
  if (bgMusic && soundEnabled) {
    bgMusic.volume = soundVolume * 0.3;
    bgMusic.play().catch(() => {});
  }

  showNotification("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stick TD! –ö—É–ø–∏—Ç–µ –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é –≤–æ–ª–Ω—É!");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  if (SaveSystem.hasSave()) {
    setTimeout(() => {
      if (confirm("–ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ! –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É?")) {
        loadGame();
      }
    }, 1000);
  }

  gameLoop();
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
window.addEventListener('load', initGame);